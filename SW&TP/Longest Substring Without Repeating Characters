class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        int l = 0;
        int r = 0;

        int n = s.size();

        int maxlen = 0;

        unordered_map<char,int>mpp;

        while(r < n)
        {
            while(mpp.find(s[r]) != mpp.end())
            {
                mpp.erase(s[l]);
                l++;
            }

            mpp[s[r]] = 1;

            maxlen = max(maxlen,r-l+1);

            r++;
        }

        return maxlen;
    }
};


// Another Method

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        int n = s.size();

        int l = 0;
        int r = 0;
        int maxlen = 0;

        vector<int>hash(256,-1);

        while(r < n)
        {
            if(hash[s[r]] != -1 && hash[s[r]] >= l)
            {
                l = hash[s[r]] + 1;
            }
            
            maxlen = max(maxlen,r-l+1);

            hash[s[r]] = r;
            r++;
     
        }

        return maxlen;
    }
};
