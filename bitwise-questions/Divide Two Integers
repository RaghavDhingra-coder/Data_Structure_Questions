class Solution {
public:
    int divide(int dividend, int divisor) {
        
        if(dividend == divisor)
            return 1;

        bool sign = true; // positive

        if(dividend >=0 && divisor < 0)
            sign = false; // negative
        
        if(dividend <0 && divisor > 0)
            sign = false; // negative

        
        long long n = llabs((long long)dividend);
        long long d = llabs((long long)divisor);

        long long ans = 0;

        while(n >= d)
        {
            int count = 0;

            while(n >= ((d<<(count+1))))
            {
                count++;
            }
            ans += (1LL<<count);

            n = n - (d<<count);
        }

        if(ans >= (1LL<<31) && sign == true)
        {
            return INT_MAX;
        }
        if(ans >= (1LL<<31) && sign == false)
        {
            return INT_MIN;
        }

        if(sign == true)
        {
            return ans;
        }
        return (ans*(-1));
    }
};
