class LRUCache {
public:

    class node
    {   
        public:
        int key,val;
        struct node* next;
        struct node* prev;

        node(int k, int v)
        {
            key = k;
            val = v;
        }

        
    };
    node* head = new node(-1,-1);
    node* tail = new node(-1,-1);
    void insert_at_start(node* n)
        {
            node*temp = head->next;;
            n->next = temp;
            n->prev = head;
            head->next = n;
            temp->prev = n;
        }

        void del(node* n)
        {
            n->prev->next = n->next;
            n->next->prev = n->prev;
        }
    int cap;
    unordered_map<int,node*>mpp;

    LRUCache(int capacity) {
        
        cap = capacity;
        head->next = tail;
        head->prev = nullptr;

        tail->next = nullptr;
        tail->prev = head;
    }
    
    int get(int key) {
        
        if(mpp.find(key) == mpp.end())
        {
            // element does not exists
            return -1;
        }
        // means the element exists
        node* element = mpp[key];
        int value = element->val;

        // now this element became recently used so we have to put it in front

        del(element);
        insert_at_start(element);

        return value;
        
    }
    
    void put(int key, int value) {
        
        if(mpp.find(key) != mpp.end())
        {
            // means the element prev exists we have to update its value

            node* element = mpp[key];
            element->val = value; // we have updated with the new value

            // now as it is recently updated we have to keep it in front
            del(element);
            insert_at_start(element);
        }
        else
        {
            if(mpp.size() == cap)
            {
                int keyy = tail->prev->key;
                mpp.erase(keyy);
                del(tail->prev);
                
                node*n = new node(key,value);
                insert_at_start(n);
                mpp[key] = n;
            }
            else
            {
                node*n = new node(key,value);
                insert_at_start(n);
                mpp[key] = n;
            }
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
