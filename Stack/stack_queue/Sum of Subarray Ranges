class Solution {
public:

    vector<int> NSE(vector<int>nums)
    {
        int n = nums.size();

        vector<int>nse(n);

        stack<int>stk;

        for(int i=n-1; i>=0; i--)
        {
            while(stk.size() > 0 && nums[stk.top()] >= nums[i])
            {
                stk.pop();
            }
            if(stk.size() == 0)
            {
                nse[i] = n;
            }
            else
            {
                nse[i] = stk.top();
            }

            stk.push(i);
        }

        return nse;
    }

    vector<int> PSE(vector<int>nums)
    {
        int n = nums.size();

        stack<int>stk;

        vector<int>pse(n);

        for(int i=0; i<n; i++)
        {
            while(stk.size() > 0 && nums[stk.top()] > nums[i])
            {
                stk.pop();
            }
            if(stk.size() == 0)
            {
                pse[i] = -1;
            }
            else
            {
                pse[i] = stk.top();
            }

            stk.push(i);
        }

        return pse;
    }

    vector<int> NGE(vector<int>nums)
    {
        int n = nums.size();

        stack<int>stk;

        vector<int>nge(n);

        for(int i=n-1; i>=0; i--)
        {
            while(stk.size() > 0 && nums[stk.top()] <= nums[i])
            {
                stk.pop();
            }

            if(stk.size() == 0)
            {
                nge[i] = n;
            }
            else
            {
                nge[i] = stk.top();
            }

            stk.push(i);
        }

        return nge;
    }

    vector<int> PGE(vector<int>nums)
    {
        int n = nums.size();

        stack<int>stk;

        vector<int>pge(n);

        for(int i=0; i<n; i++)
        {
            while(stk.size() > 0 && nums[stk.top()] < nums[i])
            {
                stk.pop();
            }

            if(stk.size() == 0)
            {
                pge[i] = -1;
            }
            else
            {
                pge[i] = stk.top();
            }

            stk.push(i);
        }

        return pge;
    }

    long long sumMins(vector<int>&nums)
    {
        long long sum = 0;

        vector<int>pse = PSE(nums);
        vector<int>nse = NSE(nums);


        int n = nums.size();

        for(int i=0; i<n; i++)
        {
           long long left = i - pse[i];
           long long right = nse[i] - i;

           sum = sum + (left*right*nums[i]);
        }

        return sum;
    }

    long long sumMaxs(vector<int>&nums)
    {
        long long sum = 0;

        vector<int>pge = PGE(nums);
        vector<int>nge = NGE(nums);

        int n = nums.size();

        for(int i=0; i<n; i++)
        {
            long long left = i - pge[i];
            long long right = nge[i] - i;

            sum = sum + (left*right*nums[i]);
        }

        return sum;
    }

    long long subArrayRanges(vector<int>& nums) {
        
        return sumMaxs(nums) - sumMins(nums);
    }
};
