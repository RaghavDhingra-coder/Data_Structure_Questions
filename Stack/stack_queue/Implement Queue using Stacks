// Methode -- 1

class MyQueue {
public:
    MyQueue() {
        
    }
    stack<int>s1;
    stack<int>s2;

    void push(int x) {
        
        while(s1.size())
        {
            s2.push(s1.top());
            s1.pop();
        }

        s1.push(x);

        while(s2.size())
        {
            s1.push(s2.top());
            s2.pop();
        }
    }
    
    int pop() {
        
        int data = s1.top();
        s1.pop();
        return data;
    }
    
    int peek() {
        
        return s1.top();
    }
    
    bool empty() {
        
        if(s1.size() == 0)
            return true;
        
        return false;
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */


Methode -- 2 (when push operations are more than pop and top)


class MyQueue {
public:
    MyQueue() {
        
    }

    stack<int>s1;
    stack<int>s2;

    void push(int x) {
        
        s1.push(x);
    }
    
    int pop() {
        
        if(s2.size() != 0)
        {
            int data = s2.top();
            s2.pop();
            return data;
        }
        while(s1.size())
        {
            s2.push(s1.top());
            s1.pop();
        }
        int data = s2.top();
        s2.pop();

        return data;
    }
    
    int peek() {
        
        if(s2.size() != 0)
        {
            return s2.top();
        }
        while(s1.size())
        {
            s2.push(s1.top());
            s1.pop();
        }
        return s2.top();
    }
    
    bool empty() {
        
        if(s1.size() || s2.size())
            return false;

        return true;
       
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
