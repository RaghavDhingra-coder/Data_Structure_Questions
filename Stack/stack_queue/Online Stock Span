// My Approach : 

class StockSpanner {
public:
 
    stack<pair<int,int>>stk;

    StockSpanner() {
        
        
    }
    
    int next(int price) {
    
        int count = 1;
        
        while(stk.size() > 0 && price >= stk.top().first)
        {
            count = count + stk.top().second;
            stk.pop();
        }

        stk.push({price,count});

        return count;

    }
};

/**


 * Your StockSpanner object will be instantiated and called as such:
 * StockSpanner* obj = new StockSpanner();
 * int param_1 = obj->next(price);
 */



// striver's approach

class StockSpanner {
public:
    stack<pair<int,int>>stk;

    int index = -1;

    StockSpanner() {
        
    }
    
    int next(int price) {
        
        index++;

        while(stk.size() > 0 && price >= stk.top().first)
        {
            stk.pop();
        }
        int ans;
        if(stk.size() == 0)
        {
            ans = index + 1;
        }
        else
        {
            ans = index - stk.top().second;
        }

        stk.push({price,index});

        return ans;

    }
};

/**
 * Your StockSpanner object will be instantiated and called as such:
 * StockSpanner* obj = new StockSpanner();
 * int param_1 = obj->next(price);
 */
