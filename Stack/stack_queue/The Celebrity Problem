// stack approach

class Solution {
  public:
    int celebrity(vector<vector<int>>& mat) {
       
       int n = mat.size(); // number of candidates
       
       stack<int>stk;
       
       for(int i=0; i<n; i++)
       {
           stk.push(i);
       }
       
       while(stk.size() > 1)
       {
           int i = stk.top();
           stk.pop();
           
           int j = stk.top();
           stk.pop();
           
           if(mat[i][j] == 1)
           {
               stk.push(j);
           }
           else
           {
               stk.push(i);
           }
       }
       
       int celeb = stk.top();
       
       for(int i=0; i<n; i++)
       {
           if((i != celeb) && ( (mat[i][celeb] == 0) || (mat[celeb][i] == 1) ))
           {
               return -1;
           }
       }
       
       return celeb;
    }
};


// More optimal (space complx -- O(1))

class Solution {
  public:
    int celebrity(vector<vector<int>>& mat) {
      
        int n = mat.size();
        
        int top = 0;
        int bottom = n-1;
        
        while(top < bottom)
        {
            if(mat[top][bottom] == 1) 
            {
                // means top know bottom , therefore top cannot be a celibrity
                top++;
            }
            else
            {
                // means top does not know bottom , therefore bottom cannot be a 
                // celibrity
                
                bottom--;
            }
        }
        
        for(int i=0; i<n; i++)
        {
            if((i != top) && (mat[i][top] == 0 || mat[top][i] == 1))
            {
                return -1;
            }
        }
        
        return top;
    }
};
