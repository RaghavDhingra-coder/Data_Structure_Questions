class Solution {
public:

    vector<int> PSE(vector<int>&heights)
    {
        int n = heights.size();

        stack<int>stk;

        vector<int>pse(n);

        for(int i=0; i<n; i++)
        {
            while(stk.size() > 0 && heights[stk.top()] >= heights[i])
            {
                stk.pop();
            }
            if(stk.size() == 0)
            {
                pse[i] = -1;
            }
            else
            {
                pse[i] = stk.top();
            }

            stk.push(i);
        }

        return pse;
    }

    vector<int> NSE(vector<int>&heights)
    {
        int n = heights.size();

        stack<int>stk;

        vector<int>nse(n);

        for(int i=n-1; i>=0; i--)
        {
            while(stk.size() > 0 && heights[stk.top()] >= heights[i])
            {
                stk.pop();
            }

            if(stk.size() == 0)
            {
                nse[i] = n;
            }
            else
            {
                nse[i] = stk.top();
            }

            stk.push(i);
        }

        return nse;
    }

    int largestRectangleArea(vector<int>& heights) {
        

            vector<int>pse = PSE(heights);
            vector<int>nse = NSE(heights);

            int maxi = 0;

            int n = heights.size();

            for(int i=0; i<n; i++)
            {
                int len = heights[i];
                int width = (i-pse[i]) + (nse[i] - i) - 1;

                maxi = max(maxi,len*width);
            }

            return maxi;
    }
};
