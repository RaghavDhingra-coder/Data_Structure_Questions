Better Approach : 

class Solution {
public:
    int trap(vector<int>& height) {
        
        int n = height.size();

        vector<int>lmax(n);
        vector<int>rmax(n);

        lmax[0] = height[0];
        rmax[n-1] = height[n-1];

        for(int i=1; i<n; i++)
        {
            lmax[i] = max(height[i],lmax[i-1]);
        }

        for(int i=n-2; i>=0; i--)
        {
            rmax[i] = max(height[i],rmax[i+1]);
        }

        int vol = 0;

        for(int i=0; i<n; i++)
        {
            vol = vol + (min(lmax[i],rmax[i])-height[i]);
        }


Optimal Approach : 

class Solution {
public:
    int trap(vector<int>& height) {
        
        int n = height.size();

        int l = 0;
        int r = n-1;

        int lmax = 0;
        int rmax = 0;

        int vol = 0;

        while(l < r)
        {
            lmax = max(lmax,height[l]);
            rmax = max(rmax,height[r]);

            if(lmax <= rmax)
            {
                vol += (lmax - height[l]);
                l++;
            }
            else
            {
                vol += (rmax - height[r]);
                r--;
            }
        }

        return  vol;
    }
};
        
        return vol;

    }
};
